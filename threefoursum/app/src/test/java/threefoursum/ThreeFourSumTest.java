/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package threefoursum;

import org.junit.Test;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertArrayEquals;

public class ThreeFourSumTest {
    @Test
    public void testThreeSum() {
        // 0 triplet
        assertNull(ThreeFourSum.threeSumCubic(
            new int [] { 1, 2, 3 }
        ));

        // 1 triplet
        assertNotNull(ThreeFourSum.threeSumCubic(
            new int [] { 1, 2, -3 }
        ));

        // multiple triplets
        assertNotNull(ThreeFourSum.threeSumCubic(
            new int [] { -1, 1, 2, 4, -3, -6 }
        ));

        // fewer than 3 integers
        assertNull(ThreeFourSum.threeSumCubic(
            new int [] { 1, 2 }
        ));
        assertNull(ThreeFourSum.threeSumCubic(
            new int [] { 1, -1 }
        ));
        assertNull(ThreeFourSum.threeSumCubic(
            new int [] { 0 }
        ));
        assertNull(ThreeFourSum.threeSumCubic(
            new int [] { 1 }
        ));
        assertNull(ThreeFourSum.threeSumCubic(
            new int [] {}
        ));

        // equal
        assertNull(ThreeFourSum.threeSumCubic(
            new int [] { 1, 1, 1 }
        ));
        assertNull(ThreeFourSum.threeSumCubic(
            new int [] { 1, 2, 1 }
        ));
        assertNull(ThreeFourSum.threeSumCubic(
            new int [] { 1, 1 }
        ));

        // distinct integers - QUESTION
        // assertNull(ThreeFourSum.threeSumCubic(
        //     new int [] { 1, 2, 3 }
        // ));

        // QUESTION - multiple triplets
        assertArrayEquals(new int[] { 1, 2, -3 },
           ThreeFourSum.threeSumCubic(new int [] {
               1, 2, -3
           })
        );
    }

    @Test
    public void testThreeHashMapNoComparison() {
        /*  Find a case that provides incorrect output (reports an invalid triple),
            and write a test that verifies that the original implementation provides correct output
            and that the version without comparison does not.
        */
    }

    // Include cases where there are 0, 1, or multiple triplets summing to 0.

    // Include cases where there are fewer than 3 integers in the list.

    // Include a case where there is an empty list.

    // Include cases where there are several equal integers and where all integers are distinct.

    @Test
    public void testFourSum() {
        // 0 quadruplet
        assertNull(ThreeFourSum.fourSumQuartic(
            new int [] { 1, 2, 3, 4 }
        ));

        // 1 quadruplet
        assertNotNull(ThreeFourSum.fourSumQuartic(
            new int [] { 3, 2, -3, -2 }
        ));

        // multiple quadruplets
        assertNotNull(ThreeFourSum.fourSumQuartic(
            new int [] { -1, 1, 2, 4, -3, -6 } // TODO
        ));

        // fewer than 4 integers
        assertNull(ThreeFourSum.fourSumQuartic(
            new int [] { 1, 2, 3 }
        ));
        assertNull(ThreeFourSum.fourSumQuartic(
            new int [] { 1, 2, -3 }
        ));
        assertNull(ThreeFourSum.fourSumQuartic(
            new int [] { 1, 2 }
        ));
        assertNull(ThreeFourSum.fourSumQuartic(
            new int [] { 1, -1 }
        ));
        assertNull(ThreeFourSum.fourSumQuartic(
            new int [] { 0 }
        ));
        assertNull(ThreeFourSum.fourSumQuartic(
            new int [] { 1 }
        ));
        assertNull(ThreeFourSum.fourSumQuartic(
            new int [] {}
        ));

        // equal
        assertNull(ThreeFourSum.fourSumQuartic(
            new int [] { 1, 1, 1 }
        ));
        assertNull(ThreeFourSum.fourSumQuartic(
            new int [] { 1, 2, 1 }
        ));
        assertNull(ThreeFourSum.fourSumQuartic(
            new int [] { 1, 1 }
        ));

        // distinct integers - QUESTION
        // assertNull(ThreeFourSum.threeSumCubic(
        //     new int [] { 1, 2, 3 }
        // ));

        // QUESTION - multiple triplets
        assertArrayEquals(new int[] { 1, 2, 3, -3, -2 },
           ThreeFourSum.threeSumCubic(new int [] {
               2, 3, -3, -2
           })
        );
    }
}