/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package threefoursum;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Scanner;

public class ThreeFourSum {
    // Three Cubic
    public static int[] threeSumCubic(int[] x) {
        int n = x.length;
        for (int i = 0; i < n; ++i) {
            int a = x[i];
            for (int j = i+1; j < n; ++j) {
                int b = x[j];
                for (int k = j+1; k < n; ++k) {
                    int c = x[k];
                    if (a + b + c == 0) {
                        return new int[] { a, b, c };
                    }
                }
            }
        }
        return null;
    }

    // Three Quadratic
    public static int[] threeSumQuadratic(int[] x) {
        int n = x.length;
        int[] y = x.clone();
        Arrays.sort(y);
        for (int i = 0; i < n; ++i) {
            int a = y[i];
            int left = i+1;
            int right = n-1;
            while (left < right) {
                int b = y[left];
                int c = y[right];
                if (a+b+c == 0) {
                    return new int[] { a, b, c};
                }
                else if (a+b+c < 0) {
                    ++left;
                }
                else {
                    --right;
                }
            }
        }

        return null;
    }

    // Three HashMap
    public static int[] threeSumHashMap(int[] x) {
        int n = x.length;
        HashMap<Integer,Integer> H = new HashMap<Integer,Integer>();
        for (int i = 0; i < n; ++i) {
            H.put(x[i], i);
        }
        for (int i = 0; i < n; ++i) {
            int a = x[i];
            for (int j = i+1; j < n; ++j) {
                int b = x[j];
                int c = -a - b;
                Integer k = H.get(c);
                if (k != null && j < k) {
                    return new int[] { a, b, c };
                }
            }
        }
        return null;
    }

    // Three HashMap without comparison (j < k)
    public static int[] threeSumHashMapNoComparison(int[] x) {
        int n = x.length;
        HashMap<Integer,Integer> H = new HashMap<Integer,Integer>();
        for (int i = 0; i < n; ++i) {
            H.put(x[i], i);
        }
        for (int i = 0; i < n; ++i) {
            int a = x[i];
            for (int j = i+1; j < n; ++j) {
                int b = x[j];
                int c = -a - b;
                Integer k = H.get(c);
                if (k != null) {
                    return new int[] { a, b, c };
                }
            }
        }
        return null;
    }

    /* ---------------------------------------------------------- */

    // Four Cubic
    public static int[] fourSumCubic(int[] x) {
        int n = x.length;
        int[] y = x.clone();
        Arrays.sort(y);
        for (int i = 0; i < n; ++i) {
            int a = y[i];
            for (int j = i+1; j < n; ++j) {
                int b = y[j];
                int left = j + 1;
                int right = n - 1;
                while (left < right) {
                    int c = y[left];
                    int d = y[right];
                    if (a + b + c + d == 0) {
                        return new int[] { a, b, c, d };
                    }
                    else if (a + b + c + d < 0) {
                        ++left;
                    } else {
                        --right;
                    }
                }
            }
        }
        return null;
    }

    // Four Quartic
    public static int[] fourSumQuartic(int[] x) {
        int n = x.length;
        for (int i = 0; i < n; ++i) {
            int a = x[i];
            for (int j = i+1; j < n; ++j) {
                int b = x[j];
                for (int k = j+1; k < n; ++k) {
                    int c = x[k];
                    for (int l = k+1; l < n; ++l) {
                        int d = x[l];
                        if (a + b + c + d == 0) {
                            return new int[] { a, b, c, d };
                        }
                    }
                }
            }
        }
        return null;
    }

    // Four HashMap
    public static int[] fourSumHashMap(int[] x) {
        int n = x.length;
        HashMap<Integer, Integer[]> H = new HashMap<Integer, Integer[]>();
        for (int i = 0; i < n; ++i) {
            for (int j = i+1; j < n; ++j) {
                Integer[] pair = {i, j};
                H.put(x[i] + x[j], pair);
            }
        }
        for (int i = 0; i < n; ++i) {
            int a = x[i];
            for (int j = i+1; j < n; ++j) {
                int b = x[j];
                Integer[] values = H.get(-a-b);
                if (values != null) {
                    Integer k = values[0];
                    Integer l = values[1];
                    if (k != null && l != null && k != 0 && l != 0 && j < k) {
                        int c = x[k];
                        int d = x[l];
                        return new int[] { a, b, c, d };
                    }
                }
            }
        }

        return null;
    }

    // Read input with Scanner
    public static int[] readData() {
        Scanner s = new Scanner(System.in);
        int[] x = null;
        try {
            int n = s.nextInt();
            x = new int[n];
            for (int i = 0; i < n; ++i) {
                x[i] = s.nextInt();
            }
        }
        finally {
            s.close();
        }
        return x;
    }

    // Validate arguments passed to the main function
    public static void validateArgs(String[] args) {
        if (args.length != 1) {
            throw new IllegalArgumentException("Supossed to find 1 element as argument");
        }
    }

    public static void main(String[] args) {
        validateArgs(args);

        boolean isFourSum = false;

        int[] x = readData();
        int[] y = null;

        switch(args[0]){
            case "t_cubic":
                y = threeSumCubic(x);
                break;
            case "t_quadratic":
                y = threeSumQuadratic(x);
                break;
            case "t_hashmap":
                y = threeSumHashMap(x);
                break;
            case "t_hashmap_nocomp":
                y = threeSumHashMapNoComparison(x);
                break;
            case "f_cubic":
                y = fourSumCubic(x);
                isFourSum = true;
                break;
            case "f_quartic":
                y = fourSumQuartic(x);
                isFourSum = true;
                break;
            case "f_hashmap":
                y = fourSumHashMap(x);
                isFourSum = true;
                break;
            default:
                System.out.println(y);
            }

        if (y == null) {
            System.out.println(y);
        } else {
            if (!isFourSum) {
                System.out.println(String.format("%d %d %d", y[0], y[1], y[2]));
            } else {
                System.out.println(String.format("%d %d %d %d", y[0], y[1], y[2], y[3]));
            }
        }
    }
}
