/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package threesum;

import org.junit.Test;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertArrayEquals;

public class ThreeSumTest {
    @Test
    public void testCubic() {
        // 0 triplets
        assertNull(ThreeSum.threeSumCubic(
            new int [] { 1, 2, 3 }
        ));

        // 1 triplet
        assertNotNull(ThreeSum.threeSumCubic(
            new int [] { 1, 2, -3 }
        ));

        // multiple triplets
        assertNotNull(ThreeSum.threeSumCubic(
            new int [] { -1, 1, 2, 4, -3, -6 }
        ));

        // fewer than 3 integers
        assertNull(ThreeSum.threeSumCubic(
            new int [] { 1, 2 }
        ));
        assertNull(ThreeSum.threeSumCubic(
            new int [] { 1, -1 }
        ));
        assertNull(ThreeSum.threeSumCubic(
            new int [] { 0 }
        ));
        assertNull(ThreeSum.threeSumCubic(
            new int [] { 1 }
        ));
        assertNull(ThreeSum.threeSumCubic(
            new int [] {}
        ));

        // equal
        assertNull(ThreeSum.threeSumCubic(
            new int [] { 1, 1, 1 }
        ));
        assertNull(ThreeSum.threeSumCubic(
            new int [] { 1, 2, 1 }
        ));
        assertNull(ThreeSum.threeSumCubic(
            new int [] { 1, 1 }
        ));

        // distinct integers - QUESTION
        // assertNull(ThreeSum.threeSumCubic(
        //     new int [] { 1, 2, 3 }
        // ));

        // QUESTION - multiple triplets
        assertArrayEquals(new int[] { 1, 2, -3 },
           ThreeSum.threeSumCubic(new int [] {
               1, 2, -3
           })
        );
    }

    @Test
    public void testQuadratic() {
    }

    @Test
    public void testHashMap() {
    }

    @Test
    public void testHashMapNoComparison() {
        /*  Find a case that provides incorrect output (reports an invalid triple),
            and write a test that verifies that the original implementation provides correct output
            and that the version without comparison does not.
        */
    }

    // Include cases where there are 0, 1, or multiple triplets summing to 0.

    // Include cases where there are fewer than 3 integers in the list.

    // Include a case where there is an empty list.

    // Include cases where there are several equal integers and where all integers are distinct.
}